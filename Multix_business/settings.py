"""
Django settings for Multix_business project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
import django_heroku
import cloudinary

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3$g8wwa1v^#=6*pk_(p6bo)&)exb*%&s^rswszve=-i=$8bzz+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Gigs',
    'Business_Accounts',
    'rest_framework',
    'rest_framework.authtoken',
    'channels',
    'channels_postgres',
    'cloudinary_storage',
    'cloudinary',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
# Use Django's standard `django.contrib.auth` permissions,
# or allow read-only access for unauthenticated users.
#'DEFAULT_PERMISSION_CLASSES': [
 #   'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#] ,
#'DEFAULT_AUTHENTICATION_CLASSES': [
 #       'rest_framework.authentication.BasicAuthentication',
  #      'rest_framework.authentication.SessionAuthentication',
   # ]

}

ROOT_URLCONF = 'Multix_business.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Multix_business.wsgi.application'
ASGI_APPLICATION = 'Multix_business.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_postgres.core.PostgresChannelLayer',
        'CONFIG': {
         'ENGINE': 'django.db.backends.postgresql_psycopg2',
         'NAME': 'multixbusiness',
         'USER': 'postgres',
         'PASSWORD': 'ntambinassim',
         'HOST': 'multixbusiness.c3cyw3txnh6g.af-south-1.rds.amazonaws.com',
         'PORT': '5432',
        },
    },
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    #'default': {
     #   'ENGINE': 'django.db.backends.sqlite3',
      #  'NAME': BASE_DIR / 'db.sqlite3',
    #},
      'default': {
		'ENGINE': 'django.db.backends.postgresql_psycopg2',
		'NAME': 'multixbusiness',
		'USER': 'postgres',
		'PASSWORD': 'ntambinassim',
		'HOST': 'multixbusiness.c3cyw3txnh6g.af-south-1.rds.amazonaws.com',
		'PORT': '5432',
	},
  
}



prod_db  =  dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(prod_db)



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


django_heroku.settings(locals())

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = '/static/'
StATICFILES_DIRS = [ os.path.join(BASE_DIR , "static") ]



STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


CLOUDINARY_STORAGE = {
   'CLOUD_NAME': 'nnana',
   'API_KEY': '295256691468576',
   'API_SECRET': 'QylwLM68WEPocm00emu3aZNqh_A',
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# MEDIA_ROOT = os.path.join(BASE_DIR, "Media")
# MEDIA_URL = "/Media/"

# Aws config

# AWS_LOCATION = 'static'
# AWS_ACCESS_KEY_ID ='AKIAZPSDYV63VD6XYDLO' 
# AWS_SECRET_ACCESS_KEY = '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'
# AWS_STORAGE_BUCKET_NAME ='multixapp'
# AWS_S3_CUSTOM_DOMAIN='%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
# AWS_S3_OBJECT_PARAMETERS = {    
#      'CacheControl': 'max-age=86400',
# }
# DEFAULT_FILE_STORAGE = 'app.storage_backends.MediaStorage'
# STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ] 
# STATIC_URL='https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
# ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
# STATICFILES_FINDERS = (           
#     'django.contrib.staticfiles.finders.FileSystemFinder',    
#     'django.contrib.staticfiles.finders.AppDirectoriesFinder',
# )
# AWS_DEFAULT_ACL = None